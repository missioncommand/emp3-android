apply from: "$rootDir/build-support/emp3-gradle-plugin/src/main/resources/android-lib.gradle"

apply plugin: 'nebula.maven-base-publish'
apply plugin: 'nebula.maven-nebula-publish'

dependencies {
    api project(':emp3-android-sdk')
    testImplementation 'junit:junit:4.12'
    //compile project     (":service:mirrorcache:service-mirrorcache-api")
    //compile project     (":service:mirrorcache:service-mirrorcache-mirrorables")
    implementation 'com.android.support:appcompat-v7'
    api 'mil.army.missioncommand:mil-sym-android-renderer'
    implementation project(':geolib')
    testImplementation project(':emp3-android-sdk-core-aar')
    //testImplementation         ("org.mockito:mockito-core")
    testImplementation('org.powermock:powermock-api-mockito:1.6.4') {
        // PowerMockito is required to mock static methods like Logger.log
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation('org.powermock:powermock-module-junit4:1.6.4') {
        exclude module: 'hamcrest-core'
        exclude module: 'objenesis'
    }
    testImplementation "org.powermock:powermock-module-junit4-rule:1.6.4"
    testImplementation "org.powermock:powermock-classloading-xstream:1.6.4"
    testImplementation 'org.robolectric:robolectric:3.5.1'
    testImplementation 'org.assertj:assertj-core:3.8.0'
    testImplementation (group: 'mil.army.missioncommand', name: 'mil-sym-android-renderer', version: "${version_renderer}", ext: 'aar') {
        transitive = true
    }

}


publishing {
    publications {
        nebula(MavenPublication) {
            artifact "$buildDir/outputs/aar/${project.name}-release.aar"
            artifact("$buildDir/outputs/aar/${project.name}-release.aar.sha256"){
                extension "aar.sha256"
            }
            artifact("$buildDir/outputs/aar/${project.name}-release.aar.md5") {
                extension "aar.md5"
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // inject the compile-time dependencies
                // TODO: this handles basic case;
                //       need to find existing plugin and/or add more robustness
                configurations.api.allDependencies.each {
                    if (it.name != 'unspecified') {

                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group == 'emp3-android-sdk-Main' ? project.ext.group : it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        if (it.version != null) {
                            //def depVer = project.dependencyManagement.dependencyManagementContainer.globalDependencyManagement.versions["$it.group:$it.name"]
                            dependencyNode.appendNode('version', it.version == 'unspecified' ? rootProject.ext.version : it.version)
                        }
                    }
                }
            }
        }
    }
}

android {
    // Add sec renderer id and version information to BuildConfig to be retrieved by About class.
    buildTypes.each {
        it.buildConfigField "String", "Implementation_Sec_Renderer_Id", "\"sec.web.renderer:mil-sym-android-renderer ${version_renderer}\""
        it.buildConfigField "String", "Implementation_Sec_Cmapi_Id", "\"org.cmapi.primitives:common-map-geospatial-notation-kotlin ${version_cmapi}\""
    }

    build.doLast { task ->
        def sourceDir = "$projectDir/build/outputs/aar/"
        def fileName = "emp3-android-sdk-view-release.aar"

        def checksumTarget = sourceDir + fileName
        ant.checksum file: checksumTarget, algorithm: "MD5", fileExt: ".md5"
        ant.checksum file: checksumTarget, algorithm: "SHA-256", fileExt: ".sha256"
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}
