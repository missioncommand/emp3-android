package mil.emp3.mapengine.events;

import android.graphics.PointF;

import org.cmapi.primitives.IGeoPosition;

import java.util.EnumSet;

import mil.emp3.api.enums.UserInteractionEventEnum;
import mil.emp3.api.enums.UserInteractionKeyEnum;
import mil.emp3.api.enums.UserInteractionMouseButtonEnum;
import mil.emp3.api.events.Event;
import mil.emp3.mapengine.interfaces.IMapInstance;

/**
 * This class implements the Map Instance User Interaction Event. It must be generated by all map engine
 * instances when the user interacts with the map. See {@link UserInteractionEventEnum}.
 * All events of this type are handled by the EMP core code.
 */
public class MapInstanceUserInteractionEvent extends Event<UserInteractionEventEnum, IMapInstance> {
    private final android.graphics.PointF oPoint;
    private final IGeoPosition oCoordinate;
    private final IGeoPosition oStartCoordinate;
    private UserInteractionMouseButtonEnum oButton;
    private final EnumSet<UserInteractionKeyEnum> oKeys;

    // eventConsumed is used internally by MapInstanceEventHandler. It is looked at by the GestureHandler (WW PickNavigateController)
    // for DRAG event only. Remember that DRAG and DRAG_COMPLETE events never propagate to applications. Applications should not
    // use this member.
    private boolean eventConsumed;

    /**
     * This constructor must be called by the map engines to create a MapInstanceUserInteractionEvent event
     * @param oMapInstance The actual map instance. The this property of the object that implements the IMapInstance interface.
     * @param eEvent The enumerated value of the event that occurred. See {@link UserInteractionEventEnum}.
     * @param oPointCoordinate The geographic coordinate of the location the event occurred.
     * @param oPosition The cartesian coordinate relative to the origin of the view container.
     * @param button Mouse button, left, right or middle
     * @param keys Keyboard keys, shift, ctrl and/or alt
     */
    @Deprecated
    public MapInstanceUserInteractionEvent(IMapInstance oMapInstance,
                                           UserInteractionEventEnum eEvent,
                                           EnumSet<UserInteractionKeyEnum> keys,
                                           UserInteractionMouseButtonEnum button,
                                           android.graphics.Point oPointCoordinate,
                                           IGeoPosition oPosition) {
        super(eEvent, oMapInstance);
        this.oPoint = new PointF(oPointCoordinate.x, oPointCoordinate.y);
        this.oCoordinate = oPosition;
        this.oStartCoordinate = null;
        this.oButton = button;
        this.oKeys = keys;
    }

    /**
     * This constructor must be called by the map engines to create a MapInstanceUserInteractionEvent event
     * @param oMapInstance The actual map instance. The this property of the object that implements the IMapInstance interface.
     * @param eEvent The enumerated value of the event that occurred. See {@link UserInteractionEventEnum}.
     * @param oPointCoordinate The geographic coordinate of the location the event occurred.
     * @param oPosition The cartesian coordinate relative to the origin of the view container.
     * @param button Mouse button, left, right or middle
     * @param keys Keyboard keys, shift, ctrl and/or alt
     */
    @Deprecated
    public MapInstanceUserInteractionEvent(IMapInstance oMapInstance,
                                           UserInteractionEventEnum eEvent,
                                           EnumSet<UserInteractionKeyEnum> keys,
                                           UserInteractionMouseButtonEnum button,
                                           android.graphics.Point oPointCoordinate,
                                           IGeoPosition oPosition,
                                           IGeoPosition oStartPosition) {
        super(eEvent, oMapInstance);
        this.oPoint = oPointCoordinate == null ? null : new PointF(oPointCoordinate.x, oPointCoordinate.y);
        this.oCoordinate = oPosition;
        this.oStartCoordinate = oStartPosition;
        this.oButton = button;
        this.oKeys = keys;
    }

    /**
     * This constructor must be called by the map engines to create a MapInstanceUserInteractionEvent event
     * @param oMapInstance The actual map instance. The this property of the object that implements the IMapInstance interface.
     * @param eEvent The enumerated value of the event that occurred. See {@link UserInteractionEventEnum}.
     * @param oPointCoordinate The geographic coordinate of the location the event occurred.
     * @param oPosition The cartesian coordinate relative to the origin of the view container.
     * @param button Mouse button, left, right or middle
     * @param keys Keyboard keys, shift, ctrl and/or alt
     */
    public MapInstanceUserInteractionEvent(IMapInstance oMapInstance,
                                           UserInteractionEventEnum eEvent,
                                           EnumSet<UserInteractionKeyEnum> keys,
                                           UserInteractionMouseButtonEnum button,
                                           android.graphics.PointF oPointCoordinate,
                                           IGeoPosition oPosition) {
        super(eEvent, oMapInstance);
        this.oPoint = oPointCoordinate;
        this.oCoordinate = oPosition;
        this.oStartCoordinate = null;
        this.oButton = button;
        this.oKeys = keys;
    }

    /**
     * This constructor must be called by the map engines to create a MapInstanceUserInteractionEvent event
     * @param oMapInstance The actual map instance. The this property of the object that implements the IMapInstance interface.
     * @param eEvent The enumerated value of the event that occurred. See {@link UserInteractionEventEnum}.
     * @param oPointCoordinate The geographic coordinate of the location the event occurred.
     * @param oPosition The cartesian coordinate relative to the origin of the view container.
     * @param button Mouse button, left, right or middle
     * @param keys Keyboard keys, shift, ctrl and/or alt
     */
    public MapInstanceUserInteractionEvent(IMapInstance oMapInstance,
                                           UserInteractionEventEnum eEvent,
                                           EnumSet<UserInteractionKeyEnum> keys,
                                           UserInteractionMouseButtonEnum button,
                                           android.graphics.PointF oPointCoordinate,
                                           IGeoPosition oPosition,
                                           IGeoPosition oStartPosition) {
        super(eEvent, oMapInstance);
        this.oPoint = oPointCoordinate;
        this.oCoordinate = oPosition;
        this.oStartCoordinate = oStartPosition;
        this.oButton = button;
        this.oKeys = keys;
    }



    /**
     * The geographic coordinate of the location the event occurred.
     *
     * Deprecated: Use getLocationF which returns a PointF for more precise location
     *
     * @return location
     */
    @Deprecated
    public android.graphics.Point getLocation() {  return this.oPoint == null ? null : new android.graphics.Point((int)this.oPoint.x,(int) this.oPoint.y);
    }

    /**
     * The geographic coordinate of the location the event occurred.
     * @return location
     */
    public android.graphics.PointF getLocationF() {
        return this.oPoint;
    }

    /**
     * Returns geo-position of the location of the event.
     * @return coordinates
     */
    public IGeoPosition getCoordinate() {
        return this.oCoordinate;
    }

    /**
     * Returns geo-position of the location where DRAG started
     * @return coordinates
     */
    public IGeoPosition getStartCoordinate() {
        return this.oCoordinate;
    }

    /**
     * Returns mouse button, left, right or middle
     * @return button
     */

    public UserInteractionMouseButtonEnum getButton() {
        return this.oButton;
    }

    /**
     * Returns keyboard keys, shift, ctrl and/or alt
     * @return enumeration of keys
     */

    public EnumSet<UserInteractionKeyEnum> getKeys() {
        return this.oKeys;
    }

    /**
     * eventConsumed is used internally by MapInstanceEventHandler. It is looked at by the GestureHandler (WW PickNavigateController)
     * for DRAG event only. Remember that DRAG and DRAG_COMPLETE events never propagate to applications. Applications should not
     * use this method.
     * @return true if event was consumed
     */
    public boolean isEventConsumed() {
        return eventConsumed;
    }

    /**
     * eventConsumed is used internally by MapInstanceEventHandler. It is looked at by the GestureHandler (WW PickNavigateController)
     * for DRAG event only. Remember that DRAG and DRAG_COMPLETE events never propagate to applications. Applications should not
     * use this method.
     * @param eventConsumed
     */
    public void setEventConsumed(boolean eventConsumed) {
        this.eventConsumed = eventConsumed;
    }
}
