buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE"
    }
}

apply plugin: io.spring.gradle.dependencymanagement.DependencyManagementPlugin


ext {
    versionFile = new File(project.rootDir, 'gradle.properties')

    //version_nasa_worldwind_sdk = "0.5.2"
    version_cmapi              = "0.0.6"
    version_renderer           = "0.1.17"

    di2eNexusEmpReleaseUrl  = "https://nexus.di2e.net/nexus/content/repositories/Private_EMP_Releases/"
    di2eNexusEmpSnapshotUrl = "https://nexus.di2e.net/nexus/content/repositories/Private_EMP_Snapshots/"
    di2eNexusEmp3rdPartyUrl = "https://nexus.di2e.net/nexus/content/repositories/Private_EMP_ThirdParty/"
}

group = "mil.army.missioncommand"

repositories {
    mavenLocal()
    jcenter()
    maven {
        url = di2eNexusEmpReleaseUrl
        credentials {
            username empUsername
            password empPassword
        }
    }
    maven {
        url = di2eNexusEmpSnapshotUrl
        credentials {
            username empUsername
            password empPassword
        }
    }
    maven {
        url = di2eNexusEmp3rdPartyUrl
        credentials {
            username empUsername
            password empPassword
        }
    }
    maven {
        url = "https://nexus.di2e.net/nexus/content/repositories/releases/"
        credentials {
            username empUsername
            password empPassword
        }
    }
    /*maven {
        url  "https://dl.bintray.com/missioncommand/maven"
    }*/
}

dependencyManagement {
    dependencies {
        // MISSION_COMMAND-related
        dependency ("org.cmapi.primitives:common-map-geospatial-notation:${version_cmapi}")
        dependency ("sec.web.renderer:mil-sym-android-renderer:${version_renderer}")

        // ANDROID-related
        dependency ("android:android:6.0_r3")
        dependency ("com.android.support:appcompat-v7:23.2.1")
        dependency ("com.android.support:support-annotations:23.1.1")
        dependency ("com.android.support:design:23.2.1")

        // TEST-related
        dependency ("junit:junit:4.12")
        dependency ("org.mockito:mockito-core:2.0.43-beta")
        dependency ("org.powermock:powermock-api-mockito:1.6.2")
        dependency ("org.powermock:powermock-module-junit4:1.6.2")
    }
}

task wrapper(type: Wrapper, description: "Generates gradlew[.bat] scripts") {
    gradleVersion = '3.1'
}

if (JavaVersion.current().isJava8Compatible()) { // disable lint for java8
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

task nextMinorVersion(description: "Increments the version property in ${versionFile}.") {
    doFirst {
        nextMinorVersion()
    }
}

void nextMinorVersion() {
    def version = readVersion()

    def octet = version['version'].split("\\.|-")

    def versionMajor = octet[0] as int
    def versionMinor = octet[1] as int
    def versionPatch = 0

    versionMinor++

    if (project.hasProperty('isSnapshot')) {
        version['version'] = "${versionMajor}.${versionMinor}.${versionPatch}-SNAPSHOT".toString()
    } else {
        version['version'] = "${versionMajor}.${versionMinor}.${versionPatch}".toString()
    }

    println "Setting version to: ${version['version']}"

    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }
}

Properties readVersion() {
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } finally {
        if (stream != null) stream.close()
    }
    return version
}

/*task removeMavenLocalRepo {
    doLast {
        for (def repo : repositories) {
            if (repo instanceof org.gradle.api.internal.artifacts.repositories.DefaultMavenLocalArtifactRepository) {
                repositories.remove (repo);
                break;
            }
        }
    }
}*/

/*dependencyManagement.importedProperties.each { key, value ->
    project.ext.set(key, value) // inject properties to project
}*/
